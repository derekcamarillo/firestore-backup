"use strict";var __awaiter=(this&&this.__awaiter)||function(thisArg,_arguments,P,generator){return new(P||(P=Promise))(function(resolve,reject){function fulfilled(value){try{step(generator.next(value));}catch(e){reject(e);}}
function rejected(value){try{step(generator["throw"](value));}catch(e){reject(e);}}
function step(result){result.done?resolve(result.value):new P(function(resolve){resolve(result.value);}).then(fulfilled,rejected);}
step((generator=generator.apply(thisArg,_arguments||[])).next());});};var __importStar=(this&&this.__importStar)||function(mod){if(mod&&mod.__esModule)return mod;var result={};if(mod!=null)for(var k in mod)if(Object.hasOwnProperty.call(mod,k))result[k]=mod[k];result["default"]=mod;return result;};Object.defineProperty(exports,"__esModule",{value:true});const admin=__importStar(require("firebase-admin"));exports.getAllCollections=(collectionNameArray)=>{const db=admin.firestore();return new Promise((resolve)=>{db.getCollections().then((snap)=>{let paths=collectionNameArray;if(paths.length===0){snap.forEach((collection)=>paths.push(...collection['_referencePath'].segments));}
let promises=[];paths.forEach((segment)=>{let result=exports.backup(segment);promises.push(result);});Promise.all(promises).then((value)=>{let all=Object.assign({},...value);resolve(all);});});});};exports.backup=(collectionName,subCollection='')=>{return new Promise((resolve,reject)=>{const db=admin.firestore();let data={};data[collectionName]={};let results=db.collection(collectionName).get().then(snapshot=>{snapshot.forEach(doc=>{data[collectionName][doc.id]=doc.data();});return data;}).catch(error=>{console.log(error);});results.then(dt=>{if(subCollection===''){resolve(dt);}
else{getSubCollection(db,data,dt,collectionName,subCollection).then(()=>{resolve(data);}).catch(error=>{console.log(error);reject(error);});}}).catch(error=>{console.log(error);reject(error);});});};const getSubCollection=(db,data,dt,collectionName,subCollection)=>__awaiter(this,void 0,void 0,function*(){for(let[key,value]of Object.entries([dt[collectionName]][0])){data[collectionName][key]['subCollection']={};yield addSubCollection(db,key,data[collectionName][key]['subCollection'],collectionName,subCollection);}});const addSubCollection=(db,key,subData,collectionName,subCollection)=>{return new Promise((resolve,reject)=>{db.collection(collectionName).doc(key).collection(subCollection).get().then(snapshot=>{snapshot.forEach(subDoc=>{subData[subDoc.id]=subDoc.data();resolve('Added data');});}).catch(error=>{reject(false);console.log(error);});});};